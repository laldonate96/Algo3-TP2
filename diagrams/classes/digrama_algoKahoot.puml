@startuml

skinparam classAttributeIconSize 0
title Diagrama de AlgoHoot


class AlgoHoot3{
    - preguntas: List<Pregunta>
    - instancia: AlgoHoot3
    - rondas: int
    - jugadorActual: Jugador
    ---
    + obtenerInstancia(): AlgoHoot3
    + pasarRonda(nuevoTurno: Turno):int
    + pasarTurno(opcionesElegidas: List<String>,modificadorPuntaje ModificadorPuntaje)
    + jugarTurno()
    + obtenerRonda(): int
    + obtenerPreguntaDeRondaActual(): Pregunta
    + asignarModificadorTurno(modificadorTurno: ModificadorTurno)
    + crearRespuestaJugador(opcionesElegida: List<String>, jugador: Jugador,modificadorPuntaje ModificadorPuntaje )
    + asignarPuntajes()
    + obtenerJugadorActual(): Jugador
}

class Pregunta {
    # enunciaod: String
    # opciones: List<Opcion>
    # puntaje: Puntaje
    # categoria: String
    ---
    + Pregunta(enunciado: String, opciones: List<Opcion>, puntaje: Puntaje, categoria: String )
    + asignarPuntajes(respuestas: List<Respuesta>)
    + obtenerOpciones(): List<String>
}

class Turno {
    - turno :Int
    - respuestasPorTurno <Jugador>
    - preguntaDelTurno: Pregunta
    - modificadoresUsados<Modificador>
    - usarModificador(modificador :Modificador)
    ---
    + {static} Turno()
    + asignarPreguntaDelTurno(pregunta :Pregunta)
    + responderPorTurno(respuestasPorTurno<Respuestas>)
}

class Lector {
    + obtenerPreguntasDeJson(mezclador: MezclaSinRepetirCategoria): List<Pregunta>
}

interface LectorParser {
    + parsearPregunta(preguntaJson: JSONObject, puntaje: Puntaje): Pregunta
}

class ParserGroup implements LectorParser{
    + parsearPregunta(preguntaJson: JSONObject, puntaje: Puntaje): Pregunta
}

class ParserMChoice implements LectorParser{
     + parsearPregunta(preguntaJson: JSONObject, puntaje: Puntaje): Pregunta
}

class ParserOrdered implements LectorParser{
    + parsearPregunta(preguntaJson: JSONObject, puntaje: Puntaje): Pregunta
}

class ParserVoF implements LectorParser{
    + parsearPregunta(preguntaJson: JSONObject, puntaje: Puntaje): Pregunta
}

interface Mezclador{
    + mezclarPreguntas(preguntas: List<Pregunta>): List<Pregunta>
}

class MezclaNula implements Mezclador{
    + mezclarPreguntas(preguntas: List<Pregunta>): List<Pregunta>
}

class MezclaSinRepetirCategoria implements Mezclador{
    + mezclarPreguntas(preguntas: List<Pregunta>): List<Pregunta>
    + compararCategorias(pregunta1: Pregunta, pregunta2: Pregunta): Bool
}

Lector  ..> LectorParser
Lector .> Mezclador
AlgoHoot3 -l-> Turno
AlgoHoot3 -r-> Lector
AlgoHoot3 -d-> Pregunta


@enduml