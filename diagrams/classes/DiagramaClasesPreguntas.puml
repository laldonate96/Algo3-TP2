@startuml PREGUNTAS

skinparam classAttributeIconSize 0

abstract class Pregunta{
    ~ categoria:String
    ~ enunciado:String
    ~ explicacion:String
    ~ puntaje:Puntaje

    + Pregunta(enunciado:String, puntaje:Puntaje, categoria:String, explicacion:String)
    + asignarPuntajes(respuestas:List<Respuesta>)
    + modificadorEsValido(modificador:Modificador):boolean
    + obtenerCategoria():String
    + obtenerEnunciado():String
    + obtenerExplicacion():String
    + {abstract} validarOpciones(opcionesJugador:List<Opcion>)
    ~ {abstract} validarTamanioOpciones(opcionesJugador:List<Opcion>)
}

class GroupChoice extends Pregunta{
    - opciones:List<Grupal>

    + GroupChoice(enunciado:String, List<Grupal> opciones, \npuntaje:Puntaje, categoria:String, explicacion:String)
    + obtenerOpciones():List<Grupal>
    + validarOpciones(opcionesJugador:List<Opcion>)
    ~ validarTamanioOpciones(opcionesJugador:List<Opcion>)
}

class MultipleChoice extends Pregunta{
    - opciones:List<Simple>

    + MultipleChoice(enunciado:String, opciones:List<Simple>, \npuntaje:Puntaje, categoria:String, explicacion:String)
    + obtenerOpciones():List<Simple>
    + validarOpciones(opcionesJugador:List<Opcion>)
    ~ validarTamanioOpciones(opcionesJugador:List<Opcion>)
}

class OrderedChoice {
    - opciones:List<Ordenada>

    + OrderedChoice(enunciado:String, opciones:List<Ordenada>, \npuntaje:Puntaje, categoria:String, explicacion:String)
    + obtenerOpciones():List<Ordenada>
    + validarOpciones(opcionesJugador:List<Opcion>)
    ~ validarTamanioOpciones(opcionesJugador:List<Opcion>)
}

class VerdaderoFalso {
    - opciones:List<Simple>

    + VerdaderoFalso(enunciado:String, opciones:List<Simple>, \npuntaje:Puntaje, categoria:String, explicacion:String)
    + obtenerOpciones():List<Simple>
    + validarOpciones(opcionesJugador:List<Opcion>)
    ~ validarTamanioOpciones(opcionesJugador:List<Opcion>)
}

Pregunta <|-up- OrderedChoice

Pregunta <|-up- VerdaderoFalso