@startuml MODIFICADORES

abstract class Modificador implements Usable{
    # duenio:Jugador
    # siguiente:Modificador

    + {abstract} modificarPuntajes(respuestas:List<Respuesta>)
    + {abstract} establecerDuenio(jugadorActivo:Jugador)
    + {abstract} agregarModificador(modificador:Modificador)
    + actualizar(List<Modificador> modificadores):Modificador 
    + mostrarModificador():String
    + usableConPenalidad():boolean
    + usableSinPenalidad():boolean
}

class Anulador extends Modificador{
    - factorDeMultiplicacion:int
    - llamados:int

    + modificarPuntajes(respuestas:List<Respuesta>)
    - aplicarModificador(respuestas:List<Respuesta>)
    + establecerDuenio(jugadorActivo:Jugador)
    + agregarModificador(modificador:Modificador)
    - boolean esIgual(modificador:Modificador)
}

class Exclusividad extends Modificador{
    - llamados:int
    - factorDeMultiplicacion:int

    + modificarPuntajes(respuestas:List<Respuesta>)
    - aplicarModificador(respuestas:List<Respuesta>)
    + establecerDuenio(jugadorActivo:Jugador)
    + agregarModificador(modificador:Modificador)
    - esIgual(modificador:Modificador):boolean 
    + usableConPenalidad():boolean
}

class Multiplicador extends Modificador{
    - factorDeMultiplicacion:int

    + Multiplicador(factorDeMultiplicacion:int)
    + modificarPuntajes(respuestas:List<Respuesta>)
    - aplicarModificador(respuestas:List<Respuesta>)
    + establecerDuenio(jugadorActivo:Jugador)
    + boolean tieneFactor(factorDeMultiplicacion:int)
    + agregarModificador(modificador:Modificador)
    + mostrarModificador():String
    + usableSinPenalidad():boolean
}

class Nulo extends Modificador{
    + modificarPuntajes(respuestas:List<Respuesta>)
    + establecerDuenio(jugadorActivo:Jugador)
    + agregarModificador(modificador:Modificador)
    + actualizar(modificadores:List<Modificador>):Modificador
    + mostrarModificador():String
}

interface Usable{
    + usableConPenalidad():boolean
    + usableSinPenalidad():boolean
}