@startuml diagrama de clases
title diagrama de clases

class Jugador{
    - nombre
    - puntos
    ---
    + {static}Jugador(nombre:String)
    + sumarPuntos(puntos: Int)
    + obtenerPuntos()
}

Class Respuesta{
    - contenido<String>
    - jugador :Jugador
    ---
    + {static} respuesta(contenido<String>, jugador:Jugador)
    + validarRespuesta(respuesta<String>)
}

interface ValidarRespuesta{
    + validarRespuestas(Respuestas<respuestas>)
    + validarRespuesta(respuesta :Respuesta)
} 

interface Penalizable{
    + penalizarRespuesta(respuesta :Respuesta)
}

class PreguntaVerdaderoFalsoClasico implements ValidarRespuesta{
    - enunciado :String
    - respuestaCorrecta<String>
    - int puntos
    ---
    + validarRespuestas(Respuestas<respuestas>)
    + validarRespuesta(respuesta :Respuesta)
}

class PreguntaVerdaderoFalsoPenalizable implements ValidarRespuesta, Penalizable{
    - enunciado :String
    - respuestaCorrecta<String>
    - int puntos
    ---
    + validarRespuestas(Respuestas<respuestas>)
    + validarRespuesta(respuesta :Respuesta)
    + penalizarRespuesta(respuesta :Respuesta)
}

class PreguntaMultipleChoiceClasico implements ValidarRespuesta{
    - enunciado :String
    - respuestaCorrecta<String>
    - opciones<String>;
    - int puntos
    ---
    + validarRespuestas(Respuestas<respuestas>)
    + validarRespuesta(respuesta :Respuesta)

}

class PreguntaMultipleChoicePenalizable implements ValidarRespuesta, Penalizable{
    - enunciado :String
    - respuestaCorrecta<String>
    - opciones<String>;
    - int puntos
    ---
    + validarRespuestas(Respuestas<respuestas>)
    + validarRespuesta(respuesta :Respuesta)
    + penalizarRespuesta(respuesta :Respuesta)
}

Respuesta -> Jugador: "1"
PreguntaVerdaderoFalsoClasico ..> Respuesta
PreguntaVerdaderoFalsoPenalizable ..> Respuesta
PreguntaMultipleChoiceClasico ..> Respuesta
PreguntaMultipleChoicePenalizable ..> Respuesta

@enduml