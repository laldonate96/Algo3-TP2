@startuml diagrama de clases
skinparam classAttributeIconSize 0
title Diagrama de clases

class Jugador{
    - nombre: String
    - puntaje: int
    ---
    + Jugador(nombre: String)
    + sumarPuntaje(puntaje: int)
    + obtenerPuntaje(): int
}

Class Respuesta {
    - contenido: List<Opcion>
    - jugador: Jugador
    ---
    + Respuesta(opciones: List<Opcion>,jugador: Jugador )
    + sumarPuntaje(puntaje: int)
    + obtenerOpciones(): List<Opcion>
    + validarOpcion(opcion: Opcion)
}

 abstract class Puntaje {
     # puntaje: int
     + asignarPuntaje(respuesta: Respuesta)
}

class Clasica extends Puntaje{
     + asignarPuntaje([super])
}

class ConPenalidad extends Puntaje{
     + asignarPuntaje([super])
}

abstract class Pregunta {
    # enunciado: String
    # opciones: List<Opcion>
    # puntaje: Puntaje
    ---
    + Pregunta(enunciado: String, opciones: List<Opcion>, puntaje: Puntaje )
    + asignarPuntajes(respuestas: List<Respuesta>)
    + asignarPuntaje(respuesta: Respuesta)
    + verificarOpciones(respuesta: Respuesta)
}

class VerdaderoFalso extends Pregunta {
    +VerdaderoOFalso([super])
}

class MultipleChoice extends Pregunta {
    +MultipleChoice([super])
}

class OrderedChoice extends Pregunta {
    +OrderedChoice([super])
}

class GroupChoice extends Pregunta {
    +GroupChoice([super])
}

abstract class Opcion {
    #texto: String
    #estado: Estado
    #equals(opcion: Opcion): Bool
    ---
    +Opcion(texto: String, estado: Estado)
    +aceptar(OpcionVisitor visitor)
    +esCorrecta(): Bool
    +actualizarEstado(estado: Estado)
}

class Ordered extends Opcion {
    -posicion: int
    ---
    +Ordered([super], posicion: int)
    +obtenerPosicion(): int
}

class Simple extends Opcion {
    +Simple([super])
}

class Group extends Opcion {
    -grupo: Grupo
    ---
    +Group([super], grupo: Grupo)
    +obtenerGrupo(): Grupo
}

interface Estado {
    + cambiarEstado()
}

class Correcta implements Estado {
    + cambiarEstado()
}

class Incorrecta implements Estado {
    + cambiarEstado()
}

class Grupo {
    -nombre: String
    ---
    +Grupo(nombre: String)
    +obtenerNombre(): String
}

interface OpcionVisitor {
    + visitarSimple(opcion: Simple)
    + visitarOrdered(opcion: Ordered)
    + visitarGroup(opcion: Group)
}

class OpcionEsVisitor {
    -opcion: Opcion
    ---
    + OpcionEsVisitor(opcion: Opcion)
    + visitarSimple(opcion: Simple)
    + visitarOrdered(opcion: Ordered)
    + visitarGroup(opcion: Group)
}

Jugador "1" <-d- Respuesta
Respuesta .l.> Pregunta
Puntaje .u.> Respuesta
Opcion *-r- Estado
Respuesta -> Opcion:"1..*"
Group -d-> Grupo
Opcion .u.> OpcionVisitor
OpcionEsVisitor .d.|> OpcionVisitor

@enduml