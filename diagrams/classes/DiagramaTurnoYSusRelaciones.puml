@startuml TURNO

skinparam classAttributeIconSize 0

class Turno{
    + agregarRespuesta(opcionesJugador:List<Opcion>, \njugador:Jugador, modificador:Modificador)
    + asignarPuntajes()
    + reiniciarTurno(pregunta:Pregunta, manejador:Manejador)
    + cantidadDeRespuestas():int
}

abstract class Pregunta{
    ~ categoria:String
    ~ enunciado:String
    ~ explicacion:String

    + Pregunta(enunciado:String, puntaje:Puntaje, \ncategoria:String, explicacion:String)
    + asignarPuntajes(respuestas:List<Respuesta>)
    + modificadorEsValido(modificador:Modificador):boolean
    + obtenerCategoria():String
    + obtenerEnunciado():String
    + obtenerExplicacion():String
    + {abstract} validarOpciones(opcionesJugador:List<Opcion>)
    ~ {abstract} validarTamanioOpciones(opcionesJugador:List<Opcion>)
}

abstract class Modificador{
    # duenio:Jugador
    # siguiente:Modificador

    + modificarPuntajes(respuestas:List<Respuesta>)
    + {abstract} establecerDuenio(jugadorActivo:Jugador)
    + {abstract} agregarModificador(modificador:Modificador)
    + actualizar(modificadores:List<Modificador>):Modificador 
    + mostrarModificador():String
    + usableConPenalidad():boolean
    + usableSinPenalidad():boolean
}

abstract class Puntaje{
    ~ puntaje:int

    + {abstract} asignarPuntaje(respuesta:Respuesta)
    + asignarPuntajes(respuestas:List<Respuesta>)
    + {abstract} modificadorEsValido(modificador:Usable):boolean
}

class Jugador{
    - puntaje:int;
    - nombre:String;
    - modificadores:List<Modificador>;

    + Jugador(nombre:String, modificadores:List<Modificador>)

    + sumarPuntaje(puntaje:int)
    + tieneMejorPuntajeQue(jugador:Jugador):boolean
    + usar(modificador:Modificador)
    + obtenerModificadores():List<Modificador>
}

class Respuesta{
    - puntaje:int

    + Respuesta(opciones:List<Opcion>, jugador:Jugador)
    + asignarPuntaje(puntaje:int)
    + obtenerOpciones():List<Opcion>
    + obtenerPuntaje():int
    + multiplicarPuntaje(valor:int)
    + esCorrecta():boolean
    + sumarPuntaje()
    + boolean perteneceA(jugador:Jugador)
}

abstract class Opcion{
    ~ texto:String
    
    + Opcion(texto:String, estado:Estado)
    + {abstract} contarCorrecta():int
    + {abstract} contarIncorrecta():int
    + obtenerTexto():String
}

Respuesta o-down- "*" Opcion
Respuesta -left-> "1" Jugador

Pregunta -left-> "1" Puntaje

Turno o-down- "2..*" Respuesta
Turno o-up- "*" Pregunta
Turno -left-> "1" Modificador

