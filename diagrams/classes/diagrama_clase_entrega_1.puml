@startuml diagrama de clases
skinparam classAttributeIconSize 0
title Diagrama de clases

class Jugador{
    - nombre: String
    - puntaje: int
    ---
    + Jugador(nombre: String)
    + sumarPuntaje(puntaje: int)
    + obtenerPuntaje(): int
}

Class Respuesta {
    - contenido: List<Opcion>
    - jugador: Jugador
    ---
    + Respuesta(opciones: List<Opcion>,jugador: Jugador )
    + sumarPuntaje(puntaje: int)
    + obtenerOpciones(): List<Opcion>
    + validarOpcion(opcion: Opcion)
}

 abstract class Puntaje {
     # puntaje: int
     + asignarPuntaje(respuesta: Respuesta)
}

class Clasica extends Puntaje{
     + asignarPuntaje([super])
}

class ConPenalidad extends Puntaje{
     + asignarPuntaje([super])
}

abstract class Pregunta {
    # enunciado: String
    # opciones: List<Opcion>
    ---
    + Pregunta(enunciado: String, opciones: List<Opcion>, puntaje: Puntaje )
    + asignarPuntajes(respuestas: List<Respuesta>)
    + asignarPuntaje(respuesta: Respuesta)
    + verificarOpciones(respuesta: Respuesta)
}

class VerdaderoFalso extends Pregunta {
    +VerdaderoOFalso([super])
}

class MultipleChoice extends Pregunta {
    +MultipleChoice([super])
    }

class Opcion {
    -texto: String
    -estado: Estado
    -equals(opcion: Opcion): Bool
    ---
    + Opcion(descripcion :String)
    + Opcion(descripcion :String, estado :Estado)
    + cambiarEstado(estado: Estado)
    + esCorrecta(): Bool
    + ActualizarEstado(opcionCorrecta: Opcion)
}

interface Estado{
    + esCorrecta(): Bool
}

class Correcta implements Estado{
    + esCorrecta(): Bool   
}

class Incorrecta implements Estado{
    + esCorrecta(): Bool
}

Jugador "1" <-d- Respuesta
Pregunta -l-> "1" Puntaje
Respuesta .l.> Pregunta
Puntaje ..> Respuesta
Opcion *-r- Estado
Pregunta ---> Opcion: "1..*"
Respuesta -> Opcion:"1..*"

@enduml
